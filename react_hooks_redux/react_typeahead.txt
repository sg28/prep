
import React, { useState, useEffect } from "react";
import axios from "axios";

interface TypeaheadProps {
  apiUrl: string;
  onSelect: (value: string) => void;
}



const Typeahead: React.FC<TypeaheadProps> = ({ apiUrl, onSelect }) => {
  
  const [inputValue, setInputValue] = useState<string>("");
  const [filteredSuggestions, setFilteredSuggestions] = useState<string[]>([]);
  const [isVisible, setIsVisible] = useState<boolean>(false);
  const [highlightedIndex, setHighlightedIndex] = useState<number>(-1);
  const [isLoading, setIsLoading] = useState<boolean>(false);


  useEffect(() => {
    const delayDebounceFn = setTimeout(() => {
      if (inputValue.trim().length > 0) {
        fetchSuggestions(inputValue);
      } else {
        setFilteredSuggestions([]);
        setIsVisible(false);
      }
    }, 300);

    return () => clearTimeout(delayDebounceFn);
  }, [inputValue]);



  const fetchSuggestions = async (query: string) => {
    try {
      setIsLoading(true);
      const response = await axios.get(`${apiUrl}?query=${query}`);
      const data = response.data; // Assuming the API returns a list of suggestions

      if (data.length > 0) {
        setFilteredSuggestions(data);
        setIsVisible(true);
      } else {
        setIsVisible(false);
      }
    } catch (error) {
      console.error("Error fetching suggestions", error);
      setIsVisible(false);
    } finally {
      setIsLoading(false);
    }
  };




  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(e.target.value);
  };



  const handleSelect = (value: string) => {
    setInputValue(value);
    setIsVisible(false);
    setFilteredSuggestions([]);
    onSelect(value);
  };




  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (!isVisible || filteredSuggestions.length === 0) return;

    if (e.key === "ArrowDown") {
      setHighlightedIndex((prev) => (prev + 1) % filteredSuggestions.length);
    } else if (e.key === "ArrowUp") {
      setHighlightedIndex(
        (prev) => (prev - 1 + filteredSuggestions.length) % filteredSuggestions.length
      );
    } else if (e.key === "Enter") {
      handleSelect(filteredSuggestions[highlightedIndex]);
    }
  };




  return (
    <div style={{ position: "relative" }}>
      

      <input
        type="text"
        value={inputValue}
        onChange={handleChange}
        onKeyDown={handleKeyDown}
        style={{ width: "200px", padding: "8px" }}
        placeholder="Start typing..."
      />
      

      {isLoading && <p>Loading suggestions...</p>}
      

      {isVisible && (
        <ul
          style={{
            listStyleType: "none",
            margin: 0,
            padding: "8px",
            border: "1px solid #ccc",
            position: "absolute",
            width: "200px",
            backgroundColor: "#fff",
            zIndex: 1000,
            maxHeight: "150px",
            overflowY: "auto",
          }}
        >


          {filteredSuggestions.map((suggestion, index) => (
            
            <li
              key={suggestion}
              onClick={() => handleSelect(suggestion)}
              style={{
                padding: "8px",
                backgroundColor: highlightedIndex === index ? "#f0f0f0" : "#fff",
                cursor: "pointer",
              }}
            >
              {suggestion}
            </li>

          ))}
        </ul>

        
      )}
    </div>
  );
};

export default Typeahead;
